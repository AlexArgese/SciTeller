services:
  frontend:
    build:
      context: ./AIScientistStoryteller
    image: sciteller/frontend
    depends_on:
      - backend
      - authapi
    ports:
      - "${FRONTEND_PORT:-8080}:80"
    networks: [scinet]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        DP_USERNAME: oauth2
        DP_ACCESS_TOKEN: ${DP_ACCESS_TOKEN}
    environment:
      REMOTE_GPU_URL: ${REMOTE_GPU_URL:-http://host.docker.internal:8018}
      DOCPARSE_BIN: docparse
      REMOTE_API_KEY: ${REMOTE_API_KEY}

      # === HF cache config ===
      HF_HOME: /hf-cache
      HUGGINGFACE_HUB_CACHE: /hf-cache/hub
      TRANSFORMERS_CACHE: /hf-cache/transformers
      HF_HUB_OFFLINE: "1"      
      TRANSFORMERS_OFFLINE: "1"
    volumes:
      - ./hf-cache:/hf-cache    
    expose:
      - "8000"
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks: [scinet]

  authapi:
    build:
      context: ./auth-api
    image: sciteller/authapi
    depends_on:
      - postgres
    environment:
      NODE_ENV: production
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:${FRONTEND_PORT:-8080}}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_SECRET: ${AUTH_SECRET}
      NEXTAUTH_TRUST_HOST: "true"
      AUTH_TRUST_HOST: "true"

      DATABASE_URL: ${DATABASE_URL}

      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_ID: ${GITHUB_ID}
      GITHUB_SECRET: ${GITHUB_SECRET}
      
      AUTH_GOOGLE_ID: ${GOOGLE_CLIENT_ID}
      AUTH_GOOGLE_SECRET: ${GOOGLE_CLIENT_SECRET}
      AUTH_GITHUB_ID: ${GITHUB_ID}
      AUTH_GITHUB_SECRET: ${GITHUB_SECRET}
      AUTH_URL: ${AUTH_URL}
      AUTH_DEBUG: "true"

      REMOTE_GPU_URL: ${REMOTE_GPU_URL:-http://host.docker.internal:8000}
      REMOTE_API_KEY: ${REMOTE_API_KEY}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    expose:
      - "3000"
    ports:
      - "${AUTH_API_PORT:-3000}:3000"
    networks: [scinet]

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [scinet]

networks:
  scinet:
    driver: bridge

volumes:
  pgdata: